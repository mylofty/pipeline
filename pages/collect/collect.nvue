<template>
  <div class="collect-container" @click="closeDropdown">
    <!-- 顶部工具栏 -->
    <div class="top-toolbar">
      <!-- 图层管理下拉框 -->
      <div class="layer-selector">
        <div class="picker-display" @click.stop="toggleDropdown">
          <text class="picker-text">{{ getDisplayText() }}</text>
          <text class="arrow" :class="{ 'arrow-up': showDropdown }">▼</text>
        </div>
        <div class="dropdown" v-if="showDropdown" @click.stop>
          <div class="dropdown-item select-all-item" @click="selectAll">
            <text>全选</text>
          </div>
          <div class="dropdown-item select-all-item" @click="selectNone">
            <text>全不选</text>
          </div>
          <div class="dropdown-divider"></div>
          <div class="dropdown-item" v-for="(item, index) in layerOptions" :key="index" @click="selectLayer(index)">
            <div class="checkbox-wrapper">
              <text class="checkbox" :class="{ checked: selectedLayers.includes(index) }">{{
                selectedLayers.includes(index) ? '✓' : '' }}</text>
              <text class="layer-name">{{ item }}</text>
            </div>
          </div>
        </div>
      </div>

    <!-- 探点号搜索框 -->
    <div class="search-container">
        <input type="text" placeholder="搜索管点物探点号..." v-model="searchPointNo" @input="onSearchInput" @confirm="searchPoint"
            class="search-input" confirm-type="search" @click.stop />
        <div class="search-btn" @click="searchPoint">
            <text>🔍</text>
        </div>
    </div>
	

    </div>

    <!-- 地图容器 -->
    <div class="map-wrapper">
      <map id="amap" class="amap" :longitude="mapCenter.longitude" :latitude="mapCenter.latitude" :scale="mapScale"
        :markers="markers" :polyline="polylines" :polygons="polygons" @tap="onMapTap" @click="onMapTap"
        @markertap="onMarkerTap" @poitap="onPoiTap" @regionchange="onRegionChange" @error="onMapError" @callouttap="onCalloutTap"
        @controltap="onControlTap" show-location enable-3D enable-overlooking enable-zoom enable-scroll enable-rotate
        :enable-satellite="mapType === 'satellite'">
      </map>

      <!-- 定位按钮 -->
      <div class="location-btn" @tap="getCurrentLocation">
        <text class="location-text">定位</text>
		<!-- 📍 -->
      </div>

      <!-- 地图中心十字准星 -->
      <div class="map-crosshair" v-if="currentTool">
        <div class="crosshair-horizontal"></div>
        <div class="crosshair-vertical"></div>
      </div>

      <!-- 右侧工具栏组件 -->
      <MapToolbar 
        :currentTool="currentTool"
        :mapType="mapType"
        @toggle-map-type="toggleMapType"
        @select-tool="selectTool"
      />
    </div>

    <!-- 测量结果显示 -->
    <div class="measure-result" v-if="measureResult.show">
      <div class="result-content">
        <text class="result-title">测量结果</text>
        <text class="result-value">{{ measureResult.text }}</text>
        <div class="result-actions">
          <div class="clear-btn" @click="clearMeasure">
            <text>清除</text>
          </div>
          <div class="close-btn" @click="closeMeasureResult">
            <text>关闭</text>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, onMounted, onUnmounted, computed } from 'vue'
import MapToolbar from './components/MapToolbar.nvue'

export default {
  components: {
    MapToolbar
  },
  setup() {
    // 响应式数据
    const searchPointNo = ref('')
    const currentTool = ref('')
    const mapType = ref('vector') // vector 或 satellite
    const mapScale = ref(16)
    const currentLayerIndex = ref(0)
    const showDropdown = ref(false)
    const selectedLayers = ref([0]) // 默认选中第一个图层
    const materialIndex = ref(0)
    const lineTypeIndex = ref(0)
    const lineMaterialIndex = ref(0)

    // 管线相关状态
    const pipelineMode = ref(false)
    const selectedPoints = ref([])

    // 图层选项
    const layerOptions = ref([
      '给水管网',
      '排水管网',
      '燃气管网',
      '热力管网',
      '电力管网',
      '通信管网'
    ])


    // 地图中心点
    const mapCenter = reactive({
      longitude: 113.49815398004169,
      latitude: 23.15523741570118
    })

    // 弹窗显示状态
    const showPointModal = ref(false)
    const showLineModal = ref(false)
    const showPipePointModal = ref(false)

    // 测量结果
    const measureResult = reactive({
      show: false,
      text: '',
      type: '' // distance 或 area
    })

    // 选中的管点信息
    const selectedPipePoint = reactive({
      id: '',
      type: '',
      diameter: '',
      material: '',
      depth: '',
      status: ''
    })

    // 地图数据
    const markers = ref([])
    const polylines = ref([])
    const polygons = ref([])

    // 临时数据
    const tempPoints = ref([]) // 用于连线时的临时点
    const measurePoints = ref([]) // 测量时的点

    // 方法实现
    const toggleDropdown = () => {
      showDropdown.value = !showDropdown.value
    }

    const selectLayer = (index) => {
      if (selectedLayers.value.includes(index)) {
        selectedLayers.value = selectedLayers.value.filter(i => i !== index)
      } else {
        selectedLayers.value.push(index)
      }

      // 更新当前显示的图层
      if (selectedLayers.value.length > 0) {
        currentLayerIndex.value = selectedLayers.value[0]
      }

      updateLayerDisplay()
    }

    const selectAll = () => {
      selectedLayers.value = layerOptions.value.map((_, index) => index)
      currentLayerIndex.value = 0
      updateLayerDisplay()
      uni.showToast({
        title: '已全选所有图层',
        icon: 'none'
      })
    }

    const selectNone = () => {
      selectedLayers.value = []
      updateLayerDisplay()
      uni.showToast({
        title: '已取消选择所有图层',
        icon: 'none'
      })
    }

    const updateLayerDisplay = () => {
      if (selectedLayers.value.length === 0) {
        // 没有选中任何图层时的处理
      } else if (selectedLayers.value.length === 1) {
        currentLayerIndex.value = selectedLayers.value[0]
      } else {
        // 多选时显示数量
        currentLayerIndex.value = selectedLayers.value[0]
      }
    }

    const getDisplayText = () => {
      if (selectedLayers.value.length === 0) {
        return '请选择图层'
      } else if (selectedLayers.value.length === 1) {
        return layerOptions.value[selectedLayers.value[0]]
      } else if (selectedLayers.value.length === layerOptions.value.length) {
        return '全部图层'
      } else {
        return `已选择${selectedLayers.value.length}个图层`
      }
    }

    const closeDropdown = () => {
      showDropdown.value = false
    }

    const onSearchInput = (e) => {
      searchPointNo.value = e.detail.value
    }

    const searchPoint = () => {
      console.log('搜索触发，当前输入值:', searchPointNo.value)
      
      if (!searchPointNo.value || !searchPointNo.value.trim()) {
        uni.showToast({
          title: '请输入探点号',
          icon: 'none'
        })
        return
      }

      // 搜索逻辑
      const foundMarker = markers.value.find(marker =>
        marker.title && marker.title.includes(searchPointNo.value.trim())
      )

      if (foundMarker) {
        mapCenter.longitude = foundMarker.longitude
        mapCenter.latitude = foundMarker.latitude
        mapScale.value = 18
        uni.showToast({
          title: '已定位到目标点',
          icon: 'success'
        })
      } else {
        uni.showToast({
          title: '未找到该探点号',
          icon: 'none'
        })
      }
    }

    const toggleMapType = () => {
      mapType.value = mapType.value === 'vector' ? 'satellite' : 'vector'
      uni.showToast({
        title: `已切换到${mapType.value === 'satellite' ? '影像' : '矢量'}地图`,
        icon: 'none'
      })
    }

    const selectTool = (tool) => {
      // 如果点击的是当前工具，则取消选择
      if (currentTool.value === tool) {
        currentTool.value = ''
        pipelineMode.value = false
        // 清除管线选择状态
        if (tool === 'line') {
          selectedPoints.value.forEach(point => {
            highlightMarker(point.id, false)
          })
          selectedPoints.value = []
        }
      } else {
        currentTool.value = tool
        
        // 如果选择管线工具，启动管线模式
        if (tool === 'line') {
          pipelineMode.value = true
          selectedPoints.value = []
        } else {
          pipelineMode.value = false
        }
      }

      // 清除临时数据
      tempPoints.value = []
      measurePoints.value = []

      const toolNames = {
        point: '管点工具',
        line: '管线工具',
        virtual: '虚拟线工具',
        shared: '共管工具',
        insert: '插入工具',
        collect: '收点工具',
        edit: '编辑工具',
        measure: '测量工具',
        flow: '流向工具',
        move: '移动工具',
        delete: '删除工具'
      }

      if (currentTool.value) {
        if (tool === 'line') {
          uni.showToast({
            title: '管线模式已启动，请依次点击两个已有的管点',
            icon: 'none'
          })
        } else {
          uni.showToast({
            title: `已选择${toolNames[tool]}，请在地图上选择位置`,
            icon: 'none'
          })
        }
      }
    }

    // 提取公共的地图点击处理逻辑
    const handleTapForCreation = (longitude, latitude) => {
      uni.showModal({
        title: '创建确认',
        content: `将在点击位置创建${getToolName(currentTool.value)}，是否继续？`,
        success: (res) => {
          if (res.confirm) {
            console.log('使用坐标:', longitude, latitude);

            switch (currentTool.value) {
              case 'point':
                createPoint(longitude, latitude);
                break;
              case 'line':
                handleLineCreation(longitude, latitude);
                break;
              case 'virtual':
                createVirtualLine(longitude, latitude);
                break;
              case 'measure':
                handleMeasure(longitude, latitude);
                break;
              case 'insert':
                insertPoint(longitude, latitude);
                break;
              default:
                break;
            }
          }
        }
      });
    };

    //创建工具
    const onMapTap = (e) => {
      console.log('onMapTap', e);
      
      if (!currentTool.value) {
        uni.showToast({
          title: '请先选择创建工具',
          icon: 'none'
        });
        return;
      }

      // 如果是管线工具，直接提示用户点击管点，不要调用handleTapForCreation
      if (currentTool.value === 'line') {
        uni.showToast({
          title: '请点击已有的管点，不要点击空白区域',
          icon: 'none'
        });
        return;
      }

      // 获取点击位置的坐标
      let clickLongitude, clickLatitude;
      
      if (e.detail && e.detail.longitude !== undefined && e.detail.latitude !== undefined) {
        // 从事件详情中获取点击坐标
        clickLongitude = e.detail.longitude;
        clickLatitude = e.detail.latitude;
        console.log('获取到点击坐标:', clickLongitude, clickLatitude);
      } else {
        // 如果无法获取点击坐标，使用地图中心点作为备选
        clickLongitude = mapCenter.longitude;
        clickLatitude = mapCenter.latitude;
        console.log('使用地图中心点坐标作为备选:', clickLongitude, clickLatitude);
      }

      handleTapForCreation(clickLongitude, clickLatitude);
    }

    // 获取工具名称
    const getToolName = (tool) => {
      const toolNames = {
        point: '管点',
        line: '管线',
        virtual: '虚拟线',
        shared: '共管',
        insert: '插入点',
        collect: '收点',
        edit: '编辑',
        measure: '测量',
        flow: '流向',
        move: '移动',
        delete: '删除'
      };
      return toolNames[tool] || '元素';
    }

    // POI点击事件处理（处理地图上的兴趣点，如"东门"、"幼儿园"等）
    const onPoiTap = (e) => {
      console.log('POI点击事件:', e);
      
      if (!currentTool.value) {
        uni.showToast({
          title: '请先选择创建工具',
          icon: 'none'
        });
        return;
      }

      // 获取POI点击位置的坐标
      let clickLongitude, clickLatitude;
      
      if (e.detail && e.detail.longitude !== undefined && e.detail.latitude !== undefined) {
        clickLongitude = e.detail.longitude;
        clickLatitude = e.detail.latitude;
        console.log('从POI事件获取坐标:', clickLongitude, clickLatitude);
      } else {
        // 如果无法获取坐标，使用地图中心点
        clickLongitude = mapCenter.longitude;
        clickLatitude = mapCenter.latitude;
        console.log('POI事件无坐标，使用地图中心点:', clickLongitude, clickLatitude);
      }

      // 提示用户确认创建位置
      uni.showModal({
        title: '创建确认',
        content: `将在${e.detail?.name || 'POI点'}位置创建${getToolName(currentTool.value)}，是否继续？`,
        success: (res) => {
          if (res.confirm) {
            console.log('确认在POI位置创建，坐标:', clickLongitude, clickLatitude);

            switch (currentTool.value) {
              case 'point':
                createPoint(clickLongitude, clickLatitude);
                break;
              case 'virtual':
                createVirtualLine(clickLongitude, clickLatitude);
                break;
              case 'measure':
                handleMeasure(clickLongitude, clickLatitude);
                break;
              case 'insert':
                insertPoint(clickLongitude, clickLatitude);
                break;
              default:
                break;
            }
          }
        }
      });
    }

    // 添加其他事件处理
    const onCalloutTap = (e) => {
      console.log('callout点击:', e);
    }

    // 监听地图控件的点击事件​​
    const onControlTap = (e) => {
      console.log('control点击:', e);
    }

    // 打点 - 跳转到管点信息页面
    const createPoint = (longitude, latitude) => {
      // 跳转到管点信息页面，传递坐标参数
      uni.navigateTo({
        url: `/pages/collect/pipe-info?longitude=${longitude}&latitude=${latitude}`
      });
      
      // 清除工具选择
      // currentTool.value = ''
    }

    // 管线工具 - 处理地图空白区域的点击（提示用户点击管点）
    const handleLineCreation = (longitude, latitude) => {
      uni.showToast({
        title: '请点击已有的管点，不要点击空白区域',
        icon: 'none'
      })
    }



    // 高亮标记点
    const highlightMarker = (markerId, highlight) => {
      const markerIndex = markers.value.findIndex(m => m.id === markerId)
      if (markerIndex > -1) {
        markers.value[markerIndex].iconPath = highlight 
          ? '/static/icons/pipe-point.png' 
          : '/static/icons/point.png'
        // 改变标记点的大小来表示选中状态
        markers.value[markerIndex].width = highlight ? 40 : 30
        markers.value[markerIndex].height = highlight ? 40 : 30
      }
    }

    // 创建虚拟线逻辑
    const createVirtualLine = (longitude, latitude) => {
      console.log("createVirtualLine", longitude, latitude)
      const virtualLine = {
        points: [
          { longitude, latitude },
          { longitude: longitude + 0.001, latitude: latitude + 0.001 }
        ],
        color: '#FF9800',
        width: 2,
        dottedLine: true
      }
      polylines.value.push(virtualLine)

      uni.showToast({
        title: '虚拟线创建成功',
        icon: 'success'
      })
    }

    // 测量工具
    const handleMeasure = (longitude, latitude) => {
      measurePoints.value.push({ longitude, latitude })

      if (measurePoints.value.length >= 2) {
        let totalDistance = 0
        for (let i = 1; i < measurePoints.value.length; i++) {
          const distance = calculateDistance(
            measurePoints.value[i - 1].latitude,
            measurePoints.value[i - 1].longitude,
            measurePoints.value[i].latitude,
            measurePoints.value[i].longitude
          )
          totalDistance += distance
        }

        measureResult.text = `总长度: ${totalDistance.toFixed(2)}米`
        measureResult.type = 'distance'
        measureResult.show = true
      }
    }

    //插入工具
    const insertPoint = (longitude, latitude) => {
      // 在最近的管线上插入点
      uni.showToast({
        title: '插入点功能开发中',
        icon: 'none'
      })
    }

    // 计算地球上两点之间的大圆距离（两点之间的最短距离）
    const calculateDistance = (lat1, lon1, lat2, lon2) => {
      const R = 6371000 // 地球半径（米）
      const dLat = (lat2 - lat1) * Math.PI / 180
      const dLon = (lon2 - lon1) * Math.PI / 180
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
      return R * c
    }

    // 计算箭头旋转角度
    const calculateArrowRotation = (lat1, lon1, lat2, lon2) => {
      const dLon = (lon2 - lon1) * Math.PI / 180
      const lat1Rad = lat1 * Math.PI / 180
      const lat2Rad = lat2 * Math.PI / 180
      
      const y = Math.sin(dLon) * Math.cos(lat2Rad)
      const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon)
      
      const bearing = Math.atan2(y, x) * 180 / Math.PI
      return (bearing + 360) % 360 // 确保角度为正值
    }

    //跳转到管点信息页面（如果需要的话）
    const openPipeInfo = () => {
      uni.showToast({
        title: '请先选择管点工具，然后在地图上选择位置',
        icon: 'none'
      });
    }

    // 实现地图交互功能
    const onMarkerTap = (e) => {
      console.log('=== onMarkerTap事件调试 ===');
      console.log('完整事件对象:', JSON.stringify(e, null, 2));

      if (!e.detail || !e.detail.markerId) {
        console.log('❌ 事件详情或markerId为空');
        return
      }

      const markerId = e.detail.markerId
      console.log('📍 点击的markerId:', markerId, '(类型:', typeof markerId, ')');
      console.log('📋 当前所有markers:');
      markers.value.forEach((m, index) => {
        console.log(`  ${index}: id="${m.id}" (类型:${typeof m.id}), title="${m.title}"`);
      });
      
      // 简化查找逻辑，专注于数字ID匹配
      let marker = markers.value.find(m => m.id === markerId || m.markerId === markerId)
      console.log('🔍 直接匹配结果:', marker ? '找到' : '未找到');
      
      console.log('✅ 最终找到的marker:', marker);

      // 如果当前工具是"管线"，处理管线模式下的管点选择
      if (currentTool.value === 'line') {
        if (!marker) {
          uni.showToast({
            title: '未找到管点信息，请确保点击的是已有管点',
            icon: 'none'
          })
          return
        }

        // 检查是否已经选择过这个点
        if (selectedPoints.value.find(p => p.id === marker.id)) {
          uni.showToast({
            title: '该管点已被选择',
            icon: 'none'
          })
          return
        }

        selectedPoints.value.push(marker)

        if (selectedPoints.value.length === 1) {
          // 高亮第一个选中的点
          highlightMarker(marker.id, true)
          uni.showToast({
            title: `已选择起点：${marker.title || marker.id}，请选择终点`,
            icon: 'none'
          })
        } else if (selectedPoints.value.length === 2) {
          // 高亮第二个选中的点
          highlightMarker(marker.id, true)
          
          // 跳转到管线配置页面
          navigateToPipelineConfig()
        }
        return; // 阻止后续的标记点处理逻辑
      }

      // 如果当前工具是“管点”，则将标记点点击视为地图点击，用于创建管点
      if (currentTool.value === 'point') {
        // 从marker对象获取坐标，这是我们创建marker时存储的坐标
        if (marker && marker.longitude !== undefined && marker.latitude !== undefined) {
          console.log('从marker对象获取坐标:', marker.longitude, marker.latitude);
          handleTapForCreation(marker.longitude, marker.latitude);
        } else {
          // 如果marker没有坐标信息，使用地图中心点
          console.log('marker没有坐标信息，使用地图中心点:', mapCenter.longitude, mapCenter.latitude);
          handleTapForCreation(mapCenter.longitude, mapCenter.latitude);
        }
        return; // 阻止后续的标记点处理逻辑
      }

      if (currentTool.value === 'edit' && marker) {
        // 编辑管点
        Object.assign(pointForm, marker.data || {})
        showPointModal.value = true
      } else if (currentTool.value === 'delete' && marker) {
        // 删除管点
        uni.showModal({
          title: '确认删除',
          content: '确定要删除这个管点吗？',
          success: (res) => {
            if (res.confirm) {
              const index = markers.value.findIndex(m => m.id === markerId)
              if (index > -1) {
                markers.value.splice(index, 1)
                uni.showToast({
                  title: '删除成功',
                  icon: 'success'
                })
              }
            }
          }
        })
      } else if (!currentTool.value && marker) {
        // 没有选择工具时，显示管点信息
        const data = marker.data || {}
        Object.assign(selectedPipePoint, {
          id: data.pointNo || marker.title || '未知',
          type: '管点',
          diameter: data.diameter || '未知',
          material: data.material || '未知',
          depth: data.depth || '未知',
          status: '正常'
        })
        showPipePointModal.value = true
      }
    }

    // 监听地图的移动、缩放等操作​​
    const onRegionChange = (e) => {
      // 仅在变化结束时（e.type === 'end'）更新中心点坐标​
      if (e.type === 'end' && e.detail && e.detail.centerLocation) {
        mapCenter.longitude = e.detail.centerLocation.longitude
        mapCenter.latitude = e.detail.centerLocation.latitude
      }
    }

    // 弹窗相关方法
    const closePointModal = () => {
      showPointModal.value = false
      Object.assign(pointForm, {
        pointNo: '',
        diameter: '',
        material: '',
        depth: '',
        remark: '',
        longitude: 0,
        latitude: 0
      })
    }

    // 跳转到管线配置页面
    const navigateToPipelineConfig = () => {
      console.log('准备跳转到管线配置页面');
      console.log('选中的点位:', selectedPoints.value);
      
      if (selectedPoints.value.length !== 2) {
        uni.showToast({
          title: '请先选择两个点位',
          icon: 'none'
        });
        return;
      }
      
      const startPointData = encodeURIComponent(JSON.stringify(selectedPoints.value[0]))
      const endPointData = encodeURIComponent(JSON.stringify(selectedPoints.value[1]))
      
      console.log('传递的起点数据:', selectedPoints.value[0]);
      console.log('传递的终点数据:', selectedPoints.value[1]);
      
      uni.navigateTo({
        url: `/pages/collect/pipeline-config?startPoint=${startPointData}&endPoint=${endPointData}`
      })
    }

    // 添加管线到地图（从配置页面返回时调用）
    const addPipeline = (pipelineData) => {
      console.log('接收到管线数据:', pipelineData)
      
      if (!pipelineData.startPointData || !pipelineData.endPointData) {
        console.error('缺少点位数据:', pipelineData);
        uni.showToast({
          title: '数据错误，无法创建管线',
          icon: 'none'
        });
        return;
      }
      
      // 创建红色管线（不带箭头属性，因为uni-app不支持）
      const newPipeline = {
        points: [
          {
            longitude: pipelineData.startPointData.longitude,
            latitude: pipelineData.startPointData.latitude
          },
          {
            longitude: pipelineData.endPointData.longitude,
            latitude: pipelineData.endPointData.latitude
          }
        ],
        color: '#FF0000', // 红色
        width: 2,
        dottedLine: false, // 实线
        data: pipelineData
      }

      console.log('创建的管线对象:', newPipeline);
      
      // 添加到地图
      polylines.value.push(newPipeline)
      
      // 计算箭头位置（在终点前一小段距离）
      const startLat = pipelineData.startPointData.latitude
      const startLng = pipelineData.startPointData.longitude
      const endLat = pipelineData.endPointData.latitude
      const endLng = pipelineData.endPointData.longitude
      
      // 计算方向向量并在终点前放置箭头
      const distance = 0.0001 // 箭头距离终点的距离
      const bearing = calculateArrowRotation(startLat, startLng, endLat, endLng)
      const arrowLat = endLat - distance * Math.cos(bearing * Math.PI / 180)
      const arrowLng = endLng - distance * Math.sin(bearing * Math.PI / 180)
      
      // 创建箭头标记（看起来像线条的一部分）
      const arrowMarker = {
        id: `arrow_${Date.now()}`,
        longitude: arrowLng,
        latitude: arrowLat,
        iconPath: '/static/icons/arrow.png',
        width: 16,
        height: 16,
        rotate: bearing,
        anchor: {
          x: 0.5,
          y: 0.5
        }
      }
      
      markers.value.push(arrowMarker)
      
      console.log('当前所有管线:', polylines.value);
      console.log('添加了终点标记');

      // 强制刷新地图数据
      polylines.value = [...polylines.value]
      markers.value = [...markers.value]

      // 清除选中状态
      selectedPoints.value.forEach(point => {
        highlightMarker(point.id, false)
      })
      selectedPoints.value = []
      currentTool.value = ''

      uni.showToast({
        title: '管线创建成功',
        icon: 'success'
      })
    }

    // 清除测量结果
    const clearMeasure = () => {
      measurePoints.value = []
      measureResult.show = false
    }

    //关闭测量结果
    const closeMeasureResult = () => {
      measureResult.show = false
    }

    // 地图错误处理
    const onMapError = (e) => {
      console.error('地图加载错误:', e)
      uni.showToast({
        title: '地图加载失败，请检查网络连接',
        icon: 'none',
        duration: 3000
      })
    }

    // 测试polyline功能
    const testPolyline = () => {
      const testLine = {
        points: [
          { longitude: 113.49815398004169, latitude: 23.15523741570118 },
          { longitude: 113.49925636792796, latitude: 23.153686206045506 }
        ],
        // color: '#FF0000',
        width: 8,
        dottedLine: false,
        // arrowIconPath: '/static/icons/arrow.png', // 箭头图标路径
		arrowLine: true,
      }
      polylines.value.push(testLine)
      console.log('添加测试线条:', testLine)
      uni.showToast({
        title: '测试线条已添加',
        icon: 'success'
      })
	  // 计算箭头位置（在终点前一小段距离）
	  const startLat = testLine['points'][0].latitude
	  const startLng = testLine['points'][0].longitude
	  const endLat = testLine['points'][1].latitude
	  const endLng = testLine['points'][1].longitude
	  
	  // 计算方向向量并在终点前放置箭头
	  const distance = 0.0001 // 箭头距离终点的距离
	  const bearing = calculateArrowRotation(startLat, startLng, endLat, endLng)
	  const arrowLat = endLat - distance * Math.cos(bearing * Math.PI / 180)
	  const arrowLng = endLng - distance * Math.sin(bearing * Math.PI / 180)
	  
	  // 创建箭头标记（看起来像线条的一部分）
	  const arrowMarker = {
	    id: `arrow_${Date.now()}`,
	    longitude: arrowLng,
	    latitude: arrowLat,
	    iconPath: '/static/icons/arrow.png',
	    width: 16,
	    height: 16,
	    rotate: bearing,
	    anchor: {
	      x: 0.5,
	      y: 0.5
	    }
	  }
	  
	  markers.value.push(arrowMarker)
	  // 强制刷新地图数据
	  polylines.value = [...polylines.value]
	  markers.value = [...markers.value]
    }

    // 生命周期
    onMounted(() => {
      // 初始化数据
      console.log('采集页面初始化完成')

      // 检查网络状态
      checkNetworkStatus()

      // 检查定位权限并获取当前位置
      checkLocationPermission()

      // 5秒后添加测试线条
      setTimeout(() => {
        testPolyline()
      }, 3000)
    })

    // 页面显示时重新注册事件监听器
    const onShow = () => {
      // 先移除之前的监听器，避免重复注册
      uni.$off('addPipePoint');
      
      // 重新监听管点保存事件
      uni.$on('addPipePoint', (pointData) => {
        console.log('接收到新管点数据:', pointData);
        console.log('原始管点ID:', pointData.id, '(类型:', typeof pointData.id, ')');
        
        // 使用当前markers数组长度+1作为唯一ID，确保不重复
        const uniqueId = markers.value.length + 1;
        pointData.id = uniqueId;
        pointData.markerId = uniqueId;
        
        console.log('处理后的管点数据:', {
          id: pointData.id,
          markerId: pointData.markerId,
          title: pointData.title
        });
        
        markers.value.push(pointData);
        console.log('添加后的markers数组:', markers.value.map(m => ({ 
          id: m.id, 
          markerId: m.markerId,
          title: m.title 
        })));
        
        // 调试：输出完整的marker数据结构
        console.log('完整的marker数据结构:');
        markers.value.forEach((marker, index) => {
          console.log(`Marker ${index}:`, JSON.stringify(marker, null, 2));
        });
        
        // 强制更新地图组件
        markers.value = [...markers.value];
        uni.showToast({
          title: '管点已添加到地图',
          icon: 'success'
        });
      });
    }

    // 检查网络状态
    const checkNetworkStatus = () => {
      uni.getNetworkType({
        success: (res) => {
          console.log('网络类型:', res.networkType);
          if (res.networkType === 'none') {
            uni.showToast({
              title: '网络连接异常，请检查网络设置',
              icon: 'none',
              duration: 3000
            });
          }
        }
      });
    }

    // 获取当前位置
    const getCurrentLocation = async () => {
      uni.showLoading({
        title: '定位中...'
      });
      
      try {
        const res = await uni.getLocation({
          type: 'gcj02',
          altitude: true,
          geocode: true
        });
        
        console.log('当前位置的经度：' + res.longitude);
        console.log('当前位置的纬度：' + res.latitude);
        
        // 更新地图中心点到当前位置
        mapCenter.longitude = res.longitude;
        mapCenter.latitude = res.latitude;
        mapScale.value = 18; // 放大地图
        
        uni.hideLoading();
        uni.showToast({
          title: '定位成功',
          icon: 'success'
        });
      } catch (error) {
        uni.hideLoading();
        console.error('获取位置失败：', error);
        uni.showToast({
          title: '定位失败，请检查定位权限',
          icon: 'none',
          duration: 3000
        });
      }
    }

    // 检查定位权限并获取当前位置
    const checkLocationPermission = async () => {
      // 页面加载时自动获取一次位置
      getCurrentLocation();
    }
    
    // 页面卸载时移除事件监听
    const onUnmounted = () => {
      uni.$off('addPipePoint');
    }

    return {
      // 响应式数据
      searchPointNo,
      currentTool,
      mapType,
      mapScale,
      currentLayerIndex,
      showDropdown,
      selectedLayers,
      materialIndex,
      lineTypeIndex,
      lineMaterialIndex,
      layerOptions,
      mapCenter,
      showPointModal,
      showLineModal,
      showPipePointModal,
      measureResult,
      selectedPipePoint,
      markers,
      polylines,
      polygons,
      tempPoints,
      measurePoints,
      
      // 管线相关数据
      pipelineMode,
      selectedPoints,

      // 方法
      toggleDropdown,
      selectLayer,
      selectAll,
      selectNone,
      updateLayerDisplay,
      getDisplayText,
      closeDropdown,
      onSearchInput,
      searchPoint,
      toggleMapType,
      selectTool,
      onMapTap,
      getToolName,
      onPoiTap,
      onCalloutTap,
      onControlTap,
      createPoint,
      handleLineCreation,
      createVirtualLine,
      handleMeasure,
      insertPoint,
      calculateDistance,
      calculateArrowRotation,
      openPipeInfo,
      onMarkerTap,
      onRegionChange,
      closePointModal,
      clearMeasure,
      closeMeasureResult,
      onMapError,
      checkNetworkStatus,
      checkLocationPermission,
      getCurrentLocation,
      handleTapForCreation, // 添加新函数到返回对象
      onShow,
      onUnmounted,
      
      // 管线相关方法
      highlightMarker,
      navigateToPipelineConfig,
      addPipeline,
    }
  },
  
  // 页面生命周期
  onShow() {
    this.onShow()
  }
}
</script>

<style scoped>
@import './collect-styles.css';
</style>